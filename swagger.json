{
  "openapi": "3.0.1",
  "info": {
    "title": "Arc API Docs",
    "description": "An API for the Arc platform.",
    "termsOfService": "https://onarc.io/terms",
    "license": {
      "name": "License",
      "url": "https://onarc.io/license"
    },
    "version": "1.0",
    "x-logo": {
      "url": "https://www.onarc.io/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Flogo_arc.9cf6e0e6.svg&w=828&q=75",
      "altText": "Arc logo"
    }
  },
  "servers": [
    {
      "url": "https://testnet-api.onarc.io",
      "description": "Testnet server (uses test data)."
    },
    {
      "url": "https://api.onarc.io",
      "description": "Mainnet server (uses live data)."
    }
  ],
  "paths": {
    "/api/v1/fees": {
      "post": {
        "tags": [
          "Fee"
        ],
        "summary": "Configure Fee Model",
        "description": "This endpoint allows to configure the fee model for a specific operation.",
        "operationId": "ConfigureFeeModel",
        "requestBody": {
          "description": "The fee model configuration request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfigureFeeModel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Returns the configured operation fee.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FeeConfigDto"
                }
              }
            }
          },
          "400": {
            "description": "The fee model configuration request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/fees/{feeId}": {
      "get": {
        "tags": [
          "Fee"
        ],
        "summary": "Get Fee Model",
        "description": "This endpoint fetches a configured operation fee by ID.",
        "operationId": "GetFeeModel",
        "parameters": [
          {
            "name": "feeId",
            "in": "path",
            "description": "The fee model configuration ID.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a configured operation fee.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FeeConfigDto"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/marketplace/sell-details": {
      "post": {
        "tags": [
          "Marketplace"
        ],
        "summary": "Get sell offer details",
        "description": "This endpoint returns the details for a sell offer in the public marketplace.",
        "operationId": "SellOfferDetails",
        "requestBody": {
          "description": "The sell offer details request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SellOfferDetailsModel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returns the details for a sell offer in the public marketplace.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderDetailsDto"
                }
              }
            }
          },
          "400": {
            "description": "The sell offer details request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "apikey": [
              "write:sell-offers"
            ]
          }
        ]
      }
    },
    "/api/v1/marketplace/sell": {
      "post": {
        "tags": [
          "Marketplace"
        ],
        "summary": "Register sell offer",
        "description": "This endpoint registers a sell offer in the public marketplace.",
        "operationId": "RegisterSellOffer",
        "requestBody": {
          "description": "The sell offer registration request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterSellOfferModel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Returns the newly registered sell offer.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferDto"
                }
              }
            }
          },
          "400": {
            "description": "The sell offer registration request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "apikey": [
              "write:sell-offers"
            ]
          }
        ]
      }
    },
    "/api/v1/marketplace/sell/{offerId}": {
      "delete": {
        "tags": [
          "Marketplace"
        ],
        "summary": "Delete sell offer",
        "description": "This endpoint deletes a sell offer in the public marketplace.",
        "operationId": "DeleteSellOffer",
        "parameters": [
          {
            "name": "offerId",
            "in": "path",
            "description": "The offer id.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The sell offer was successfully deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferDto"
                }
              }
            }
          },
          "400": {
            "description": "The sell offer deletion request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "The sell offer doesn't exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "apikey": [
              "write:sell-offers"
            ]
          }
        ]
      }
    },
    "/api/v1/marketplace/sell-offers": {
      "get": {
        "tags": [
          "Marketplace"
        ],
        "summary": "List sell offers",
        "description": "This endpoint returns a paginated list of sell offer in the public marketplace.",
        "operationId": "ListSellOffers",
        "parameters": [
          {
            "name": "offer_status",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/OfferStatus"
            }
          },
          {
            "name": "product_id",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Product ID",
              "type": "string",
              "description": "The unique identifier of the product.",
              "format": "guid"
            }
          },
          {
            "name": "user_id",
            "in": "query",
            "schema": {
              "title": "User ID",
              "type": "string",
              "description": "The unique identifier of the user.",
              "format": "guid"
            }
          },
          {
            "name": "page_number",
            "in": "query",
            "schema": {
              "title": "Page Number",
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "description": "The page number to retrieve.",
              "format": "int32"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "schema": {
              "title": "Page Size",
              "maximum": 100,
              "minimum": 0,
              "type": "integer",
              "description": "The number of items to retrieve per page.",
              "format": "int32"
            }
          },
          {
            "name": "sort_by",
            "in": "query",
            "schema": {
              "title": "Sort By",
              "type": "string",
              "description": "The field to sort the results by."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a paginated list of sell offers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferDtoPaginatedResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "The sell offer filters were invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "apikey": [
              "read:sell-offers"
            ]
          }
        ]
      }
    },
    "/api/v1/marketplace/buy-details": {
      "post": {
        "tags": [
          "Marketplace"
        ],
        "summary": "Get buy order details",
        "description": "This endpoint returns the details for a buy order in the public marketplace.",
        "operationId": "BuyOrderDetails",
        "requestBody": {
          "description": "The buy order details request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BuyOrderDetailsModel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returns the order details for a buy order in the public marketplace.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderDetailsDto"
                }
              }
            }
          },
          "400": {
            "description": "The buy order details request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "apikey": [
              "write:buy-orders"
            ]
          }
        ]
      }
    },
    "/api/v1/marketplace/buy": {
      "post": {
        "tags": [
          "Marketplace"
        ],
        "summary": "Register buy order",
        "description": "This endpoint buys a product listed in the public marketplace.",
        "operationId": "RegisterBuyOrder",
        "requestBody": {
          "description": "The buy order registration request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterBuyOrderModel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Returns the newly registered buy order.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferDto"
                }
              }
            }
          },
          "400": {
            "description": "The buy order registration request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "apikey": [
              "write:buy-orders"
            ]
          }
        ]
      }
    },
    "/api/v1/marketplace/buy-orders": {
      "get": {
        "tags": [
          "Marketplace"
        ],
        "summary": "List buy orders",
        "description": "This endpoint returns a paginated list of buy orders in the public marketplace.",
        "operationId": "ListBuyOrders",
        "parameters": [
          {
            "name": "offer_id",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Offer ID",
              "type": "string",
              "description": "The unique identifier of the offer.",
              "format": "guid"
            }
          },
          {
            "name": "page_number",
            "in": "query",
            "schema": {
              "title": "Page Number",
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "description": "The page number to retrieve.",
              "format": "int32"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "schema": {
              "title": "Page Size",
              "maximum": 100,
              "minimum": 0,
              "type": "integer",
              "description": "The number of items to retrieve per page.",
              "format": "int32"
            }
          },
          {
            "name": "sort_by",
            "in": "query",
            "schema": {
              "title": "Sort By",
              "type": "string",
              "description": "The field to sort the results by."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a paginated list of buy orders.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MarketplaceOrderDtoPaginatedResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "The buy order filters were invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "apikey": [
              "read:buy-orders"
            ]
          }
        ]
      }
    },
    "/api/v1/mint": {
      "post": {
        "tags": [
          "Mint"
        ],
        "summary": "Mint Assets",
        "description": "This endpoint allows for the minting of fungible and non-fungible assets.",
        "operationId": "MintAssets",
        "requestBody": {
          "description": "The assets to mint for each user.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchMintRequestModel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returns the vaults updated by the mint operation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/VaultDto"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The mint request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "apikey": [
              "mint:assets"
            ]
          }
        ]
      }
    },
    "/api/v1/orders/details": {
      "post": {
        "tags": [
          "Order"
        ],
        "summary": "Get Order Details (Not Implemented)",
        "description": "This endpoint allows for fetching details of an order to be signed.",
        "operationId": "OrderDetails",
        "requestBody": {
          "description": "The signable order details request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderDetailsModel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returns the signable order details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderDetailsDto"
                }
              }
            }
          },
          "400": {
            "description": "The signable order request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/orders": {
      "post": {
        "tags": [
          "Order"
        ],
        "summary": "Submit Order (Not Implemented)",
        "description": "This endpoint submits an order to the matching engine.",
        "operationId": "SubmitOrder",
        "requestBody": {
          "description": "The order submission request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubmitOrderModel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Returns the created order.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderDto"
                }
              }
            }
          },
          "400": {
            "description": "The order submission request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/orders/{orderId}": {
      "delete": {
        "tags": [
          "Order"
        ],
        "summary": "Cancel Order (Not Implemented)",
        "description": "This endpoint cancels an active order.",
        "operationId": "CancelOrder",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the cancelled order.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderDto"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/orderbooks": {
      "post": {
        "tags": [
          "Orderbook"
        ],
        "summary": "Create Orderbook (Not Implemented)",
        "description": "This endpoint creates an orderbook.",
        "operationId": "CreateOrderbook",
        "requestBody": {
          "description": "The orderbook creation request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrderbookModel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Returns the created orderbook.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderbookDto"
                }
              }
            }
          },
          "400": {
            "description": "The orderbook creation request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/orderbooks/{orderbookId}": {
      "get": {
        "tags": [
          "Orderbook"
        ],
        "summary": "Get Orderbook (Not Implemented)",
        "description": "This endpoint fetches orderbook metadata by ID.",
        "operationId": "GetOrderbook",
        "parameters": [
          {
            "name": "orderbookId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns orderbook metadata.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderbookDto"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/orderbooks/{orderbookId}/l1": {
      "get": {
        "tags": [
          "Orderbook"
        ],
        "summary": "Get Orderbook L1 Data (Not Implemented)",
        "description": "This endpoint fetches orderbook level 1 data by ID.",
        "operationId": "GetOrderbookLevel1Data",
        "parameters": [
          {
            "name": "orderbookId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns orderbook level 1 data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderbookLevel1DataDto"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/orderbooks/{orderbookId}/l2": {
      "get": {
        "tags": [
          "Orderbook"
        ],
        "summary": "Get Orderbook L2 Data (Not Implemented)",
        "description": "This endpoint fetches orderbook level 2 data by ID.",
        "operationId": "GetOrderbookLevel2Data",
        "parameters": [
          {
            "name": "orderbookId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "depth",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns orderbook level 2 data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderbookLevel2DataDto"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/settlements": {
      "post": {
        "tags": [
          "Settlement"
        ],
        "summary": "Submit Settlement",
        "description": "This endpoint submits an order settlement.",
        "operationId": "SubmitSettlement",
        "requestBody": {
          "description": "The settlement request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubmitSettlementModel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returns the vaults updated by the settlement operation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VaultDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "The settlement request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "apikey": [
              "write:settlements"
            ]
          }
        ]
      }
    },
    "/api/v1/assets": {
      "post": {
        "tags": [
          "Asset"
        ],
        "summary": "Enable Asset",
        "description": "This endpoint allows to enable an asset in the tenant system.",
        "operationId": "EnableAsset",
        "requestBody": {
          "description": "The asset enabling request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EnableAssetModel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Returns the enabled asset.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantAssetDto"
                }
              }
            }
          },
          "400": {
            "description": "The asset enabling request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "apikey": [
              "write:tenant_assets"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "Asset"
        ],
        "summary": "Get All Assets",
        "description": "This endpoint fetches all assets enabled in the tenant system, with support for filters and pagination.",
        "operationId": "GetAllAssets",
        "parameters": [
          {
            "name": "asset_id",
            "in": "query",
            "schema": {
              "title": "Asset ID",
              "type": "string",
              "description": "The unique identifier of the asset.",
              "format": "uuid"
            }
          },
          {
            "name": "asset_type",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/AssetType"
            }
          },
          {
            "name": "asset_type_comparison",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/FilterOptions"
            }
          },
          {
            "name": "asset_symbol",
            "in": "query",
            "schema": {
              "title": "Symbol",
              "type": "string",
              "description": "The symbol of the asset.",
              "format": "string"
            }
          },
          {
            "name": "asset_symbol_comparison",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/FilterOptions"
            }
          },
          {
            "name": "page_number",
            "in": "query",
            "schema": {
              "title": "Page Number",
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "description": "The page number to retrieve.",
              "format": "int32"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "schema": {
              "title": "Page Size",
              "maximum": 100,
              "minimum": 0,
              "type": "integer",
              "description": "The number of items to retrieve per page.",
              "format": "int32"
            }
          },
          {
            "name": "sort_by",
            "in": "query",
            "schema": {
              "title": "Sort By",
              "type": "string",
              "description": "The field to sort the results by."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns all assets enabled in the tenant system (paginated).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantAssetDtoPaginatedResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "apikey": [
              "read:tenant_assets"
            ]
          }
        ]
      }
    },
    "/api/v1/assets/disable": {
      "post": {
        "tags": [
          "Asset"
        ],
        "summary": "Disable Asset",
        "description": "This endpoint allows to disable an asset in the tenant system.",
        "operationId": "DisableAsset",
        "requestBody": {
          "description": "The asset disabling request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DisableAssetModel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returns the disabled asset.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantAssetDto"
                }
              }
            }
          },
          "400": {
            "description": "The asset disabling request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "apikey": [
              "write:tenant_assets"
            ]
          }
        ]
      }
    },
    "/api/v1/assets/{assetId}": {
      "get": {
        "tags": [
          "Asset"
        ],
        "summary": "Get Asset",
        "description": "This endpoint fetches a specific enabled asset by ID.",
        "operationId": "GetAsset",
        "parameters": [
          {
            "name": "assetId",
            "in": "path",
            "description": "The asset ID.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an asset enabled in the tenant system.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantAssetDto"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "apikey": [
              "read:tenant_assets"
            ]
          }
        ]
      }
    },
    "/api/v1/assets/deploy": {
      "post": {
        "tags": [
          "Asset"
        ],
        "summary": "Deploy Asset",
        "description": "This endpoint allows for deploying an asset and enable it in the tenant system.",
        "operationId": "Deploy Asset",
        "requestBody": {
          "description": "The asset deployment request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeployAssetModel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Returns the deployed asset.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantAssetDto"
                }
              }
            }
          },
          "400": {
            "description": "The asset deployment request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "apikey": [
              "write:tenant_assets",
              "write:smart-contracts"
            ]
          }
        ]
      }
    },
    "/api/v1/assets/estimate-deploy": {
      "get": {
        "tags": [
          "Asset"
        ],
        "summary": "Estimate cost of the deployment for a new Asset",
        "description": "This endpoint allows for deploying an asset and enable it in the tenant system.",
        "operationId": "Estimate Asset Deploy Cost",
        "parameters": [
          {
            "name": "asset_type",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AssetType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the estimated cost of the asset deployment.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantAssetDto"
                }
              }
            }
          },
          "400": {
            "description": "The asset deployment estimation request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "apikey": [
              "write:tenant_assets",
              "write:smart-contracts"
            ]
          }
        ]
      }
    },
    "/api/v1/transactions": {
      "get": {
        "tags": [
          "Transaction"
        ],
        "summary": "Get All Transactions",
        "description": "This endpoint fetches all transactions submitted by the system, with support for filters and pagination.",
        "operationId": "GetAllTransactions",
        "parameters": [
          {
            "name": "transaction_status",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/TransactionStatus"
            }
          },
          {
            "name": "transaction_status_comparison",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/FilterOptions"
            }
          },
          {
            "name": "starkex_tx_id",
            "in": "query",
            "schema": {
              "title": "StarkEx Transaction ID",
              "type": "integer",
              "description": "The unique identifier of the StarkEx transaction.",
              "format": "integer"
            }
          },
          {
            "name": "starkex_tx_id_comparison",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/FilterOptions"
            }
          },
          {
            "name": "tx_type",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/StarkExOperation"
            }
          },
          {
            "name": "tx_type_comparison",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/FilterOptions"
            }
          },
          {
            "name": "page_number",
            "in": "query",
            "schema": {
              "title": "Page Number",
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "description": "The page number to retrieve.",
              "format": "int32"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "schema": {
              "title": "Page Size",
              "maximum": 100,
              "minimum": 0,
              "type": "integer",
              "description": "The number of items to retrieve per page.",
              "format": "int32"
            }
          },
          {
            "name": "sort_by",
            "in": "query",
            "schema": {
              "title": "Sort By",
              "type": "string",
              "description": "The field to sort the results by."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns all transactions submitted by the system (paginated).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionDtoPaginatedResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "apikey": [
              "read:transactions"
            ]
          }
        ]
      }
    },
    "/api/v1/transactions/{transactionId}": {
      "get": {
        "tags": [
          "Transaction"
        ],
        "summary": "Get Transaction",
        "description": "This endpoint fetches a specific transaction by ID.",
        "operationId": "GetTransaction",
        "parameters": [
          {
            "name": "transactionId",
            "in": "path",
            "description": "The transaction ID.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a transaction.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionDto"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "apikey": [
              "read:transactions"
            ]
          }
        ]
      }
    },
    "/api/v1/transfers": {
      "post": {
        "tags": [
          "Transfer"
        ],
        "summary": "Transfer Asset",
        "description": "This endpoint allows for transferring assets between users.",
        "operationId": "Transfer",
        "requestBody": {
          "description": "The transfer request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransferModel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returns the vaults updated by the transfer operation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VaultDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "The transfer request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "apikey": [
              "write:transfers"
            ]
          }
        ]
      }
    },
    "/api/v1/transfers/details": {
      "post": {
        "tags": [
          "Transfer"
        ],
        "summary": "Get Transfer Details",
        "description": "This endpoint allows for fetching details of a transfer to be signed (allocates a vault for the receiver)",
        "operationId": "TransferDetails",
        "requestBody": {
          "description": "The signable transfer details request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransferDetailsModel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returns the signable transfer details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransferDetailsDto"
                }
              }
            }
          },
          "400": {
            "description": "The signable transfer request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "apikey": [
              "write:transfers"
            ]
          }
        ]
      }
    },
    "/api/v1/users": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Register new User",
        "description": "This endpoint registers a user.",
        "operationId": "RegisterUser",
        "requestBody": {
          "description": "The user registration request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterUserModel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Returns the newly registered user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              }
            }
          },
          "400": {
            "description": "The user registration request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "apikey": [
              "write:users"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get All Users",
        "description": "This endpoint fetches all users.",
        "operationId": "GetAllUsers",
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "schema": {
              "title": "Username",
              "type": "string",
              "description": "The username of the user.",
              "format": "string"
            }
          },
          {
            "name": "username_comparison",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/FilterOptions"
            }
          },
          {
            "name": "address",
            "in": "query",
            "schema": {
              "title": "Ethereum Address",
              "type": "string",
              "description": "The Ethereum address associated with the user.",
              "format": "hex"
            }
          },
          {
            "name": "creation_date",
            "in": "query",
            "schema": {
              "title": "Creation Date",
              "type": "string",
              "description": "The creation date of the user.",
              "format": "string"
            }
          },
          {
            "name": "creation_date_comparison",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/FilterOptions"
            }
          },
          {
            "name": "page_number",
            "in": "query",
            "schema": {
              "title": "Page Number",
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "description": "The page number to retrieve.",
              "format": "int32"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "schema": {
              "title": "Page Size",
              "maximum": 100,
              "minimum": 0,
              "type": "integer",
              "description": "The number of items to retrieve per page.",
              "format": "int32"
            }
          },
          {
            "name": "sort_by",
            "in": "query",
            "schema": {
              "title": "Sort By",
              "type": "string",
              "description": "The field to sort the results by."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns all users.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDtoPaginatedResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "apikey": [
              "read:users"
            ]
          }
        ]
      }
    },
    "/api/v1/users/register-details": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get EIP712 data to be signed",
        "description": "This endpoint return the typed data to be signed with EIP712 that is used on user registration.",
        "operationId": "EIP712Details",
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Username",
              "maxLength": 30,
              "minLength": 6,
              "type": "string",
              "description": "The username of the user.",
              "format": "string"
            }
          },
          {
            "name": "stark_key",
            "in": "query",
            "required": true,
            "schema": {
              "title": "STARK Key",
              "type": "string",
              "description": "The STARK key of the user.",
              "format": "hex"
            }
          },
          {
            "name": "address",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Address",
              "type": "string",
              "description": "The Ethereum address associated with the user.",
              "format": "hex"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the EIP712 typed data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisterDetailsDto"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "apikey": [
              "read:users"
            ]
          }
        ]
      }
    },
    "/api/v1/users/{userId}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get User",
        "description": "This endpoint fetches a specific user by ID.",
        "operationId": "GetUser",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The user id.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserWithVaultsDto"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "apikey": [
              "read:users"
            ]
          }
        ]
      }
    },
    "/api/v1/vaults/deposit-details": {
      "post": {
        "tags": [
          "Deposit"
        ],
        "summary": "Returns the deposit details for a given asset.",
        "description": "This endpoint returns the deposit details for a given user, asset, and data availability mode.",
        "operationId": "DepositDetails",
        "requestBody": {
          "description": "The deposit details request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DepositDetailsModel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returns the deposit details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DepositDetailsDto"
                }
              }
            }
          },
          "400": {
            "description": "The deposit details request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "apikey": [
              "read:vaults",
              "write:vaults"
            ]
          }
        ]
      }
    },
    "/api/v1/vaults": {
      "get": {
        "tags": [
          "Vault"
        ],
        "summary": "Get All Vaults",
        "description": "This endpoint fetches all vaults in the system, with support for filters and pagination.",
        "operationId": "GetAllVaults",
        "parameters": [
          {
            "name": "asset_id",
            "in": "query",
            "schema": {
              "title": "Asset ID",
              "type": "string",
              "description": "The unique identifier of the asset.",
              "format": "uuid"
            }
          },
          {
            "name": "page_number",
            "in": "query",
            "schema": {
              "title": "Page Number",
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "description": "The page number to retrieve.",
              "format": "int32"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "schema": {
              "title": "Page Size",
              "maximum": 100,
              "minimum": 0,
              "type": "integer",
              "description": "The number of items to retrieve per page.",
              "format": "int32"
            }
          },
          {
            "name": "sort_by",
            "in": "query",
            "schema": {
              "title": "Sort By",
              "type": "string",
              "description": "The field to sort the results by."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns all vaults in the system (paginated).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VaultDtoPaginatedResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "apikey": [
              "read:vaults"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Vault"
        ],
        "summary": "Allocate vault",
        "description": "This endpoint allocates a new vault for a given asset, if there isn't one already allocated.",
        "operationId": "AllocateVault",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AllocateVaultModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the newly allocated vault.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VaultDto"
                }
              }
            }
          },
          "400": {
            "description": "The vault allocation request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "apikey": [
              "write:vaults"
            ]
          }
        ]
      }
    },
    "/api/v1/vaults/{vaultId}": {
      "get": {
        "tags": [
          "Vault"
        ],
        "summary": "Get a single Vault",
        "description": "This endpoint fetches a vault identified by its unique id.",
        "operationId": "GetVault",
        "parameters": [
          {
            "name": "vaultId",
            "in": "path",
            "description": "The vault id.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a single vault identified by its id.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VaultDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "apikey": [
              "read:vaults"
            ]
          }
        ]
      }
    },
    "/api/v1/vaults/withdraw": {
      "post": {
        "tags": [
          "Withdraw"
        ],
        "summary": "Withdraw Asset",
        "description": "This endpoint allows for withdrawing assets from StarkExpress.",
        "operationId": "Withdraw",
        "requestBody": {
          "description": "The withdraw request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WithdrawModel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returns the details of the withdraw operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WithdrawDetailsDto"
                }
              }
            }
          },
          "400": {
            "description": "The withdraw request was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "apikey": [
              "write:vaults"
            ]
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "AllocateVaultModel": {
        "required": [
          "dataAvailabilityMode"
        ],
        "type": "object",
        "properties": {
          "assetId": {
            "title": "Asset ID",
            "type": "string",
            "description": "The unique identifier of the asset.",
            "format": "uuid"
          },
          "userId": {
            "title": "User ID",
            "type": "string",
            "description": "The unique identifier of the user.",
            "format": "uuid"
          },
          "dataAvailabilityMode": {
            "$ref": "#/components/schemas/DataAvailabilityModes"
          },
          "tokenId": {
            "title": "Token ID",
            "type": "string",
            "description": "The hexadecimal string representation of the vault's asset token ID, if applicable (ie. ERC-721/ERC-1155).",
            "format": "hex",
            "nullable": true
          },
          "mintingBlob": {
            "title": "Minting Blob",
            "type": "string",
            "description": "The hexadecimal string representation of the vault's asset minting blob, if applicable (ie. Mintable ERC-20/Mintable ERC-721/Mintable ERC-1155).",
            "format": "hex",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AssetType": {
        "enum": [
          "Eth",
          "Erc20",
          "Erc721",
          "Erc1155",
          "MintableErc20",
          "MintableErc721",
          "MintableErc1155"
        ],
        "type": "string"
      },
      "BatchMintRequestModel": {
        "required": [
          "users"
        ],
        "type": "object",
        "properties": {
          "users": {
            "title": "Mints",
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MintRequestDataModel"
            },
            "description": "The array of assets to mint grouped by user.",
            "format": "array"
          }
        },
        "additionalProperties": false,
        "description": "Request model to mint a batch of assets."
      },
      "BigInteger": {
        "type": "object",
        "properties": {
          "bitCount": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "bitLength": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "intValue": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "intValueExact": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "longValue": {
            "type": "integer",
            "format": "int64",
            "readOnly": true
          },
          "longValueExact": {
            "type": "integer",
            "format": "int64",
            "readOnly": true
          },
          "signValue": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "BuyOrderDetailsModel": {
        "required": [
          "buyerId",
          "dataAvailabilityMode",
          "offerId"
        ],
        "type": "object",
        "properties": {
          "buyerId": {
            "title": "Buyer ID",
            "type": "string",
            "description": "The unique identifier of the user who is placing the buy order.",
            "format": "uuid"
          },
          "offerId": {
            "title": "Offer ID",
            "type": "string",
            "description": "The unique identifier of the offer that is being bought.",
            "format": "uuid"
          },
          "dataAvailabilityMode": {
            "$ref": "#/components/schemas/DataAvailabilityModes"
          }
        },
        "additionalProperties": false
      },
      "ConfigureFeeModel": {
        "required": [
          "basisPoints",
          "feeAction"
        ],
        "type": "object",
        "properties": {
          "feeAction": {
            "$ref": "#/components/schemas/FeeAction"
          },
          "basisPoints": {
            "title": "Basis Points",
            "maximum": 10000,
            "minimum": 0,
            "type": "integer",
            "description": "The basis points (1/100 of a percent) of the fee to take on the operation.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Request model to configure the fee model for an operation."
      },
      "CreateOrderbookModel": {
        "required": [
          "baseAssetId",
          "baseAssetPrecision",
          "quoteAssetId",
          "quoteAssetPrecision"
        ],
        "type": "object",
        "properties": {
          "baseAssetId": {
            "title": "Base Asset ID",
            "type": "string",
            "description": "The ID of the orderbook base asset.",
            "format": "uuid"
          },
          "quoteAssetId": {
            "title": "Quote Asset ID",
            "type": "string",
            "description": "The ID of the orderbook quote asset.",
            "format": "uuid"
          },
          "baseAssetPrecision": {
            "title": "Base Asset Precision",
            "type": "integer",
            "description": "The orderbook base asset decimal precision.",
            "format": "int32"
          },
          "quoteAssetPrecision": {
            "title": "Quote Asset Precision",
            "type": "integer",
            "description": "The orderbook quote asset decimal precision.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Request model to create an orderbook."
      },
      "DataAvailabilityModes": {
        "enum": [
          "ZkRollup",
          "Validium"
        ],
        "type": "string"
      },
      "DeployAssetModel": {
        "required": [
          "name",
          "symbol",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/AssetType"
          },
          "name": {
            "title": "Name",
            "minLength": 1,
            "type": "string",
            "description": "The token's name (eg. USD Coin).",
            "format": "string"
          },
          "symbol": {
            "title": "Name",
            "minLength": 1,
            "type": "string",
            "description": "The token's symbol (eg. USDC).",
            "format": "string"
          },
          "uri": {
            "title": "Uri",
            "type": "string",
            "description": "The token's metadata uri (for ERC-721 and ERC-1155 tokens).",
            "format": "string",
            "nullable": true
          },
          "quantum": {
            "title": "Quantum",
            "type": "string",
            "description": "The token's StarkEx asset quantum (for ERC-20 and ERC-1155 tokens).",
            "format": "string"
          }
        },
        "additionalProperties": false
      },
      "DepositDetailsDto": {
        "type": "object",
        "properties": {
          "operatorContractAddress": {
            "title": "Operator Smart Contract Address",
            "type": "string",
            "description": "The smart contract address that processes on-chain deposits.",
            "format": "hex",
            "nullable": true
          },
          "assetContractAddress": {
            "title": "Asset Smart Contract Address",
            "type": "string",
            "description": "The asset's smart contract address.",
            "format": "hex",
            "nullable": true
          },
          "depositFunction": {
            "title": "Smart Contract Address",
            "type": "string",
            "description": "The deposit function to use on-chain.",
            "format": "string",
            "nullable": true
          },
          "starkKey": {
            "title": "User's STARK Key",
            "type": "string",
            "description": "The user's public STARK key",
            "format": "hex",
            "nullable": true
          },
          "assetType": {
            "title": "Asset type",
            "type": "string",
            "description": "The asset type identifier.",
            "format": "hex",
            "nullable": true
          },
          "tokenId": {
            "title": "Token Id",
            "type": "string",
            "description": "The token Id for ERC-721 and ERC-1155 assets.",
            "format": "hex",
            "nullable": true
          },
          "vaultId": {
            "title": "Vault Id",
            "type": "string",
            "description": "The user's vault id.",
            "format": "string"
          },
          "quantizedAmount": {
            "title": "Quantized amount",
            "type": "string",
            "description": "The quantized amount to deposit ERC-20 and ERC-1155 assets.",
            "format": "string",
            "nullable": true
          },
          "amount": {
            "title": "Amount",
            "type": "string",
            "description": "The amount to deposit ETH.",
            "format": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DepositDetailsModel": {
        "required": [
          "amount",
          "assetId",
          "dataAvailabilityMode",
          "userId"
        ],
        "type": "object",
        "properties": {
          "userId": {
            "title": "User ID",
            "type": "string",
            "description": "The ID of the user for which the vault should be allocated.",
            "format": "uuid"
          },
          "assetId": {
            "title": "Asset ID",
            "type": "string",
            "description": "The ID of the vault's asset.",
            "format": "uuid"
          },
          "dataAvailabilityMode": {
            "$ref": "#/components/schemas/DataAvailabilityModes"
          },
          "tokenId": {
            "title": "Token ID",
            "type": "string",
            "description": "The hexadecimal string representation of the vault's asset token ID, if applicable (ie. ERC-721/ERC-1155).",
            "format": "hex",
            "nullable": true
          },
          "amount": {
            "title": "Amount",
            "type": "string",
            "description": "The amount of the asset to be deposited.",
            "format": "string"
          }
        },
        "additionalProperties": false
      },
      "DisableAssetModel": {
        "required": [
          "assetId"
        ],
        "type": "object",
        "properties": {
          "assetId": {
            "title": "Asset ID",
            "type": "string",
            "description": "The unique identifier of the asset to disable.",
            "format": "uuid"
          }
        },
        "additionalProperties": false,
        "description": "Request model to enable an asset in the tenant system."
      },
      "DomainDto": {
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string",
            "description": "The name of the domain for the EIP712 signing.",
            "format": "string",
            "nullable": true
          },
          "version": {
            "title": "Version",
            "type": "string",
            "description": "The version of the domain for the EIP712 signing.",
            "format": "string",
            "nullable": true
          },
          "chainId": {
            "title": "ChainId",
            "type": "integer",
            "description": "The chainId for the domain for the EIP712 signing.",
            "format": "string",
            "nullable": true
          },
          "verifyingContract": {
            "title": "VerifyingContract",
            "type": "string",
            "description": "The verifying contract for the domain for the EIP712 signing.",
            "format": "hex",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EnableAssetModel": {
        "required": [
          "assetId"
        ],
        "type": "object",
        "properties": {
          "assetId": {
            "title": "Asset ID",
            "type": "string",
            "description": "The unique identifier of the asset to enable.",
            "format": "uuid"
          }
        },
        "additionalProperties": false,
        "description": "Request model to enable an asset in the tenant system."
      },
      "FeeAction": {
        "enum": [
          "Transfer",
          "ConditionalTransfer",
          "MakerOrder",
          "TakerOrder"
        ],
        "type": "string"
      },
      "FeeConfigDto": {
        "type": "object",
        "properties": {
          "feeId": {
            "title": "Fee ID",
            "type": "string",
            "description": "The unique identifier of the fee configuration.",
            "format": "uuid"
          },
          "action": {
            "$ref": "#/components/schemas/FeeAction"
          },
          "basisPoints": {
            "title": "Basis Points",
            "type": "integer",
            "description": "The basis points (1/100 of a percent) of the fee to take on the operation.",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "FeeDto": {
        "type": "object",
        "properties": {
          "vaultId": {
            "title": "Vault ID",
            "type": "string",
            "description": "The vault ID of the fee sender.",
            "format": "uuid"
          },
          "vaultChainId": {
            "$ref": "#/components/schemas/BigInteger"
          },
          "assetId": {
            "title": "StarkEx Asset ID",
            "type": "string",
            "description": "The StarkEx ID of the fee asset to be collected.",
            "format": "string",
            "nullable": true
          },
          "quantizedAmount": {
            "$ref": "#/components/schemas/BigInteger"
          }
        },
        "additionalProperties": false
      },
      "FilterOptions": {
        "enum": [
          "StartsWith",
          "EndsWith",
          "Contains",
          "DoesNotContain",
          "IsEmpty",
          "IsNotEmpty",
          "IsGreaterThan",
          "IsGreaterThanOrEqualTo",
          "IsLessThan",
          "IsLessThanOrEqualTo",
          "IsEqualTo",
          "IsNotEqualTo"
        ],
        "type": "string"
      },
      "MarketplaceOrderDto": {
        "type": "object",
        "properties": {
          "id": {
            "title": "Order ID",
            "type": "string",
            "description": "The ID of the order.",
            "format": "uuid"
          },
          "productId": {
            "title": "Product ID",
            "type": "string",
            "description": "The ID of the product.",
            "format": "uuid"
          },
          "quantity": {
            "title": "Quantity",
            "type": "string",
            "description": "Quantity of the product order.",
            "format": "int"
          },
          "price": {
            "title": "Price",
            "type": "string",
            "description": "The price on the product order.",
            "format": "int"
          },
          "date": {
            "title": "Date",
            "type": "string",
            "description": "The date of the product order.",
            "format": "date"
          }
        },
        "additionalProperties": false
      },
      "MarketplaceOrderDtoPaginatedResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "title": "Data",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MarketplaceOrderDto"
            },
            "description": "The data in the paginated response.",
            "nullable": true
          },
          "pagination": {
            "$ref": "#/components/schemas/PaginationDto"
          },
          "totalCount": {
            "title": "TotalCount",
            "type": "integer",
            "description": "The total count of results available.",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "MemberDescriptionDto": {
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string",
            "description": "The name of the variable.",
            "format": "string",
            "nullable": true
          },
          "type": {
            "title": "Type",
            "type": "string",
            "description": "The type of the variable.",
            "format": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MemberValueDto": {
        "type": "object",
        "properties": {
          "typeName": {
            "title": "Type Name",
            "type": "string",
            "description": "The type name of the variable.",
            "format": "string",
            "nullable": true
          },
          "value": {
            "title": "Value",
            "type": "string",
            "description": "The value of the variable.",
            "format": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MessageDto": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "starkKey": {
            "type": "string",
            "nullable": true
          },
          "address": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MintDataModel": {
        "required": [
          "amount",
          "assetId",
          "dataAvailabilityMode",
          "mintingBlob"
        ],
        "type": "object",
        "properties": {
          "mintingBlob": {
            "title": "Minting Blob",
            "minLength": 1,
            "type": "string",
            "description": "The hexadecimal string representation of the data to be associated with the asset being minted.",
            "format": "hex"
          },
          "assetId": {
            "title": "Asset ID",
            "type": "string",
            "description": "The unique identifier of the asset being minted.",
            "format": "uuid"
          },
          "amount": {
            "title": "Amount",
            "type": "string",
            "description": "The amount of the asset to be minted.",
            "format": "string"
          },
          "dataAvailabilityMode": {
            "$ref": "#/components/schemas/DataAvailabilityModes"
          }
        },
        "additionalProperties": false,
        "description": "Model containing information to mint an asset."
      },
      "MintRequestDataModel": {
        "required": [
          "mints",
          "userId"
        ],
        "type": "object",
        "properties": {
          "userId": {
            "title": "User ID",
            "type": "string",
            "description": "The ID of the user for which the assets should be minted.",
            "format": "uuid"
          },
          "mints": {
            "title": "User Mints",
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MintDataModel"
            },
            "description": "The array of assets to mint for the user."
          }
        },
        "additionalProperties": false,
        "description": "Request model to mint a batch of assets."
      },
      "OfferDto": {
        "type": "object",
        "properties": {
          "offerId": {
            "title": "Offer ID",
            "type": "string",
            "description": "The ID of the offer.",
            "format": "uuid"
          },
          "productId": {
            "title": "Product ID",
            "type": "string",
            "description": "The ID of the product.",
            "format": "uuid"
          },
          "quantity": {
            "title": "Quantity",
            "type": "string",
            "description": "Quantity of the product offer.",
            "format": "int"
          },
          "price": {
            "title": "Price",
            "type": "string",
            "description": "The price on the product offer.",
            "format": "int"
          },
          "creationDate": {
            "title": "Creation Date",
            "type": "string",
            "description": "The date of creation of the product offer.",
            "format": "date"
          },
          "closingDate": {
            "title": "Closing Date",
            "type": "string",
            "description": "The date of closure of the product offer.",
            "format": "date",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OfferDtoPaginatedResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "title": "Data",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OfferDto"
            },
            "description": "The data in the paginated response.",
            "nullable": true
          },
          "pagination": {
            "$ref": "#/components/schemas/PaginationDto"
          },
          "totalCount": {
            "title": "TotalCount",
            "type": "integer",
            "description": "The total count of results available.",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "OfferStatus": {
        "enum": [
          "Open",
          "Cancelled",
          "Closed",
          "Expired"
        ],
        "type": "string"
      },
      "OrderDetailsDto": {
        "type": "object",
        "properties": {
          "starkKey": {
            "title": "User STARK Key",
            "type": "string",
            "description": "The STARK key of the user.",
            "format": "hex",
            "nullable": true
          },
          "sellQuantizedAmount": {
            "title": "Sell Quantized Amount",
            "type": "string",
            "description": "The amount to be sold, in quantized form."
          },
          "buyQuantizedAmount": {
            "title": "Buy Quantized Amount",
            "type": "string",
            "description": "The amount to be bough, in quantized form."
          },
          "sellVaultChainId": {
            "title": "Sell Vault Chain ID",
            "type": "string",
            "description": "The vault chain ID for the asset being sold.",
            "format": "string"
          },
          "buyVaultChainId": {
            "title": "Sell Vault Chain ID",
            "type": "string",
            "description": "The vault chain ID for the asset being bought.",
            "format": "string"
          },
          "sellVaultId": {
            "title": "Sell Vault ID",
            "type": "string",
            "description": "The vault ID for the asset being sold.",
            "format": "guid"
          },
          "buyVaultId": {
            "title": "Sell Vault ID",
            "type": "string",
            "description": "The vault ID for the asset being bought.",
            "format": "guid"
          },
          "fee": {
            "$ref": "#/components/schemas/FeeDto"
          },
          "expirationTimestamp": {
            "title": "Expiration Timestamp",
            "type": "integer",
            "description": "The timestamp at which this order becomes invalid, in seconds since the Unix epoch.",
            "format": "int64"
          },
          "nonce": {
            "title": "Nonce",
            "type": "integer",
            "description": "The unique nonce for the order.",
            "format": "int32"
          },
          "signablePayload": {
            "title": "Signable Payload",
            "type": "string",
            "description": "The signable payload for the order.",
            "format": "hex",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OrderDetailsModel": {
        "required": [
          "amount",
          "buyDataAvailabilityMode",
          "orderbookId",
          "price",
          "sellDataAvailabilityMode",
          "side",
          "userId"
        ],
        "type": "object",
        "properties": {
          "orderbookId": {
            "title": "Orderbook ID",
            "type": "string",
            "description": "The ID of the orderbook.",
            "format": "uuid"
          },
          "userId": {
            "title": "User ID",
            "type": "string",
            "description": "The unique identifier of the user submitting the order.",
            "format": "uuid"
          },
          "side": {
            "$ref": "#/components/schemas/OrderSide"
          },
          "price": {
            "title": "Price",
            "type": "number",
            "description": "The order price.",
            "format": "double"
          },
          "amount": {
            "$ref": "#/components/schemas/BigInteger"
          },
          "sellDataAvailabilityMode": {
            "$ref": "#/components/schemas/DataAvailabilityModes"
          },
          "buyDataAvailabilityMode": {
            "$ref": "#/components/schemas/DataAvailabilityModes"
          }
        },
        "additionalProperties": false,
        "description": "Request model to fetch details for a signable order."
      },
      "OrderDto": {
        "type": "object",
        "properties": {
          "orderId": {
            "title": "Order ID",
            "type": "string",
            "description": "The ID of the order.",
            "format": "uuid"
          },
          "orderbookId": {
            "title": "Orderbook ID",
            "type": "string",
            "description": "The ID of the orderbook.",
            "format": "uuid"
          },
          "price": {
            "title": "Price",
            "type": "number",
            "description": "The order price.",
            "format": "double"
          },
          "originalAmount": {
            "title": "Original Amount",
            "type": "string",
            "description": "The original order amount.",
            "format": "string"
          },
          "executedAmount": {
            "title": "Executed Amount",
            "type": "string",
            "description": "The executed order amount.",
            "format": "string"
          },
          "fills": {
            "title": "Fills",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderFillDto"
            },
            "description": "The order fills.",
            "format": "array",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OrderFillDto": {
        "type": "object",
        "properties": {
          "price": {
            "title": "Price",
            "type": "number",
            "description": "The fill price.",
            "format": "double"
          },
          "amount": {
            "title": "Amount",
            "type": "string",
            "description": "The fill amount.",
            "format": "string"
          }
        },
        "additionalProperties": false
      },
      "OrderSide": {
        "enum": [
          "Bid",
          "Ask"
        ],
        "type": "string"
      },
      "OrderbookAssetDto": {
        "type": "object",
        "properties": {
          "assetId": {
            "title": "Asset ID",
            "type": "string",
            "description": "The ID of the asset.",
            "format": "uuid"
          },
          "precision": {
            "title": "Precision",
            "type": "integer",
            "description": "The orderbook precision of the asset.",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "OrderbookDto": {
        "type": "object",
        "properties": {
          "orderbookId": {
            "title": "Orderbook ID",
            "type": "string",
            "description": "The ID of the orderbook.",
            "format": "uuid"
          },
          "symbol": {
            "title": "Symbol",
            "type": "string",
            "description": "The orderbook symbol.",
            "nullable": true
          },
          "baseAsset": {
            "$ref": "#/components/schemas/OrderbookAssetDto"
          },
          "quoteAsset": {
            "$ref": "#/components/schemas/OrderbookAssetDto"
          }
        },
        "additionalProperties": false
      },
      "OrderbookLevel1DataDto": {
        "type": "object",
        "properties": {
          "orderbookId": {
            "title": "Orderbook ID",
            "type": "string",
            "description": "The ID of the orderbook.",
            "format": "uuid"
          },
          "bidPrice": {
            "title": "Bid Price",
            "type": "number",
            "description": "The highest posted price where someone is willing to buy an asset.",
            "format": "double"
          },
          "bidSize": {
            "title": "Bid Size",
            "type": "string",
            "description": "The number of asset shares that users are trying to buy at the bid price.",
            "format": "string"
          },
          "askPrice": {
            "title": "Ask Price",
            "type": "number",
            "description": "The lowest posted price where someone is willing to sell an asset.",
            "format": "double"
          },
          "askSize": {
            "title": "Ask Size",
            "type": "string",
            "description": "The number of asset shares that users are trying to sell at the bid ask.",
            "format": "string"
          },
          "lastPrice": {
            "title": "Last Price",
            "type": "number",
            "description": "The price at which the last transaction occurred.",
            "format": "double"
          },
          "lastSize": {
            "title": "Last Size",
            "type": "string",
            "description": "The number of asset shares involved in the last transaction.",
            "format": "string"
          }
        },
        "additionalProperties": false
      },
      "OrderbookLevel2DataDto": {
        "type": "object",
        "properties": {
          "orderbookId": {
            "title": "Orderbook ID",
            "type": "string",
            "description": "The ID of the orderbook.",
            "format": "uuid"
          },
          "bids": {
            "title": "Bids",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderbookLevel2EntryDto"
            },
            "description": "The orderbook bids.",
            "format": "array",
            "nullable": true
          },
          "asks": {
            "title": "Asks",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderbookLevel2EntryDto"
            },
            "description": "The orderbook asks.",
            "format": "array",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OrderbookLevel2EntryDto": {
        "type": "object",
        "properties": {
          "price": {
            "title": "Price",
            "type": "number",
            "description": "The orderbook level price.",
            "format": "double"
          },
          "amount": {
            "title": "Amount",
            "type": "string",
            "description": "The orderbook level amount.",
            "format": "string"
          }
        },
        "additionalProperties": false
      },
      "PaginationDto": {
        "type": "object",
        "properties": {
          "pageNumber": {
            "title": "Page Number",
            "type": "integer",
            "description": "The page number.",
            "format": "int32"
          },
          "pageSize": {
            "title": "Page Size",
            "type": "integer",
            "description": "The number of items per page.",
            "format": "int32"
          },
          "hasNext": {
            "title": "HasNext",
            "type": "boolean",
            "description": "Indicates whether there is a next page available."
          }
        },
        "additionalProperties": false
      },
      "ProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": { }
      },
      "RegisterBuyOrderModel": {
        "required": [
          "buyerId",
          "currencyVaultId",
          "expirationTimestamp",
          "nonce",
          "offerId",
          "productVaultId",
          "signature"
        ],
        "type": "object",
        "properties": {
          "offerId": {
            "title": "Offer ID",
            "type": "string",
            "description": "The unique identifier of the marketplace offer.",
            "format": "uuid"
          },
          "buyerId": {
            "title": "Buyer ID",
            "type": "string",
            "description": "The unique identifier of the user who is placing the buy order.",
            "format": "uuid"
          },
          "productVaultId": {
            "title": "Product Vault ID",
            "type": "string",
            "description": "The unique identifier of the product vault.",
            "format": "uuid"
          },
          "currencyVaultId": {
            "title": "Currency Vault ID",
            "type": "string",
            "description": "The unique identifier of the currency vault.",
            "format": "uuid"
          },
          "expirationTimestamp": {
            "title": "Expiration Timestamp",
            "type": "integer",
            "description": "The timestamp at which this transfer becomes invalid, in seconds since the Unix epoch.",
            "format": "int64"
          },
          "nonce": {
            "title": "Nonce",
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "description": "The unique nonce for the settlement.",
            "format": "int32"
          },
          "signature": {
            "$ref": "#/components/schemas/SignatureModel"
          }
        },
        "additionalProperties": false
      },
      "RegisterDetailsDto": {
        "type": "object",
        "properties": {
          "domain": {
            "$ref": "#/components/schemas/DomainDto"
          },
          "types": {
            "title": "Types",
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/MemberDescriptionDto"
              }
            },
            "description": "The types in the EIP712 message.",
            "format": "dict",
            "nullable": true
          },
          "primaryType": {
            "title": "Primary Type",
            "type": "string",
            "description": "The message primary type.",
            "format": "string",
            "nullable": true
          },
          "message": {
            "$ref": "#/components/schemas/MessageDto"
          },
          "domainRawValues": {
            "title": "Sender STARK Key",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MemberValueDto"
            },
            "description": "The STARK key of the sender.",
            "format": "array",
            "nullable": true
          },
          "signablePayload": {
            "title": "Signable Payload",
            "type": "string",
            "description": "The signable payload.",
            "format": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RegisterSellOfferModel": {
        "required": [
          "currencyAmount",
          "currencyVaultId",
          "expirationTimestamp",
          "nonce",
          "productAmount",
          "productVaultId",
          "sellerId",
          "signature"
        ],
        "type": "object",
        "properties": {
          "sellerId": {
            "title": "Seller ID",
            "type": "string",
            "description": "The unique identifier of the user who is placing the sell offer.",
            "format": "uuid"
          },
          "productVaultId": {
            "title": "Product Vault ID",
            "type": "string",
            "description": "The unique identifier of the product vault.",
            "format": "uuid"
          },
          "productAmount": {
            "title": "Product Amount",
            "type": "string",
            "description": "The quantized amount of the product being sold."
          },
          "currencyVaultId": {
            "title": "Currency Vault ID",
            "type": "string",
            "description": "The unique identifier of the currency vault.",
            "format": "uuid"
          },
          "currencyAmount": {
            "title": "Currency Amount",
            "type": "string",
            "description": "The quantized amount of the currency for which the product is being sold."
          },
          "expirationTimestamp": {
            "title": "Expiration Timestamp",
            "type": "integer",
            "description": "The timestamp at which this settlement becomes invalid, in seconds since the Unix epoch.",
            "format": "int64"
          },
          "nonce": {
            "title": "Nonce",
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "description": "The unique nonce for the transfer.",
            "format": "int32"
          },
          "productName": {
            "title": "Product name",
            "maxLength": 100,
            "type": "string",
            "description": "The product name if the product hasn't been listed before in the marketplace.",
            "format": "string",
            "nullable": true
          },
          "productDescription": {
            "title": "Product description",
            "maxLength": 300,
            "type": "string",
            "description": "The product description if the product hasn't been listed before in the marketplace.",
            "format": "string",
            "nullable": true
          },
          "signature": {
            "$ref": "#/components/schemas/SignatureModel"
          }
        },
        "additionalProperties": false
      },
      "RegisterUserModel": {
        "required": [
          "address",
          "eip712Signature",
          "starkKey",
          "starkSignature",
          "username"
        ],
        "type": "object",
        "properties": {
          "username": {
            "title": "Username",
            "maxLength": 30,
            "minLength": 6,
            "type": "string",
            "description": "The username of the user.",
            "format": "string"
          },
          "starkKey": {
            "title": "STARK Key",
            "minLength": 1,
            "type": "string",
            "description": "The STARK key of the user.",
            "format": "hex"
          },
          "starkSignature": {
            "$ref": "#/components/schemas/SignatureModel"
          },
          "address": {
            "title": "Address",
            "minLength": 1,
            "type": "string",
            "description": "The Ethereum address associated with the user.",
            "format": "hex"
          },
          "eip712Signature": {
            "title": "EIP-712 Signature",
            "minLength": 1,
            "type": "string",
            "description": "The EIP-712 Signature of the Username, Stark Key and Address.",
            "format": "hex"
          }
        },
        "additionalProperties": false
      },
      "SellOfferDetailsModel": {
        "required": [
          "assetId",
          "currencyId",
          "dataAvailabilityMode",
          "price",
          "quantity",
          "sellerId"
        ],
        "type": "object",
        "properties": {
          "sellerId": {
            "title": "Seller ID",
            "type": "string",
            "description": "The unique identifier of the user who is placing the sell offer.",
            "format": "uuid"
          },
          "assetId": {
            "title": "Asset ID",
            "type": "string",
            "description": "The unique identifier of the asset that is being sold.",
            "format": "uuid"
          },
          "quantity": {
            "title": "Quantity",
            "type": "string",
            "description": "The quantity of the product that is being sold."
          },
          "tokenId": {
            "title": "Token ID",
            "type": "string",
            "description": "The hexadecimal string representation of the token ID, if applicable (ie. ERC-721/ERC-1155).",
            "format": "hex",
            "nullable": true
          },
          "mintingBlob": {
            "title": "Minting Blob",
            "type": "string",
            "description": "The hexadecimal string representation of the minting blob, if applicable (ie. Mintable ERC-20/ERC-721/ERC-1155).",
            "format": "hex",
            "nullable": true
          },
          "currencyId": {
            "title": "Currency ID",
            "type": "string",
            "description": "The unique identifier of the asset that is being used as currency.",
            "format": "uuid"
          },
          "dataAvailabilityMode": {
            "$ref": "#/components/schemas/DataAvailabilityModes"
          },
          "price": {
            "title": "Price",
            "type": "string",
            "description": "The price of the asset that is being sold."
          }
        },
        "additionalProperties": false
      },
      "SettlementInfoModel": {
        "type": "object",
        "properties": {
          "orderAFeeDestinationVaultId": {
            "title": "Order A Fee Destination Vault ID",
            "type": "string",
            "description": "The unique identifier of the destination vault for the order A fee.",
            "format": "uuid",
            "nullable": true
          },
          "orderAFeeAmount": {
            "title": "Order A Fee Amount",
            "type": "string",
            "description": "The order A fee amount.",
            "format": "string",
            "nullable": true
          },
          "orderBFeeDestinationVaultId": {
            "title": "Order B Fee Destination Vault ID",
            "type": "string",
            "description": "The unique identifier of the destination vault for the order B fee.",
            "format": "uuid",
            "nullable": true
          },
          "orderBFeeAmount": {
            "title": "Order B Fee Amount",
            "type": "string",
            "description": "The order B fee amount.",
            "format": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Settlement details model."
      },
      "SettlementOrderModel": {
        "required": [
          "buyQuantizedAmount",
          "buyVaultId",
          "expirationTimestamp",
          "nonce",
          "sellQuantizedAmount",
          "sellVaultId",
          "signature"
        ],
        "type": "object",
        "properties": {
          "buyVaultId": {
            "title": "Buy Vault ID",
            "type": "string",
            "description": "The unique identifier of the buy vault.",
            "format": "uuid"
          },
          "buyQuantizedAmount": {
            "title": "Buy Quantized Amount",
            "type": "string",
            "description": "The amount of the asset to be settled, in quantized form."
          },
          "sellVaultId": {
            "title": "Sell Vault ID",
            "type": "string",
            "description": "The unique identifier of the sell vault.",
            "format": "uuid"
          },
          "sellQuantizedAmount": {
            "title": "Sell Quantized Amount",
            "type": "string",
            "description": "The amount of the asset to be settled, in quantized form."
          },
          "feeVaultId": {
            "title": "Fee Vault ID",
            "type": "string",
            "description": "The unique identifier of the transfer sender vault.",
            "format": "uuid",
            "nullable": true
          },
          "feeQuantizedAmount": {
            "title": "Fee Quantized Amount",
            "type": "string",
            "description": "The amount of the fee asset to be collected, in quantized form.",
            "nullable": true
          },
          "nonce": {
            "title": "Nonce",
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "description": "The unique nonce for the transfer.",
            "format": "int32"
          },
          "signature": {
            "$ref": "#/components/schemas/SignatureModel"
          },
          "expirationTimestamp": {
            "title": "Expiration Timestamp",
            "type": "integer",
            "description": "The timestamp at which this transfer becomes invalid, in seconds since the Unix epoch.",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "SignatureModel": {
        "required": [
          "r",
          "s"
        ],
        "type": "object",
        "properties": {
          "r": {
            "title": "Signature R",
            "minLength": 1,
            "type": "string",
            "description": "The R component of the ECDSA signature, represented as a hexadecimal string.",
            "format": "hex"
          },
          "s": {
            "title": "Signature S",
            "minLength": 1,
            "type": "string",
            "description": "The S component of the ECDSA signature, represented as a hexadecimal string.",
            "format": "hex"
          }
        },
        "additionalProperties": false,
        "description": "Model representing an ECDSA signature data."
      },
      "StarkExOperation": {
        "enum": [
          "Deposit",
          "Withdrawal",
          "Mint",
          "MultiTransaction",
          "Transfer",
          "FullWithdrawal",
          "FalseFullWithdrawal",
          "Settlement"
        ],
        "type": "string"
      },
      "SubmitOrderModel": {
        "required": [
          "amount",
          "buyDataAvailabilityMode",
          "expirationTimestamp",
          "nonce",
          "orderbookId",
          "price",
          "sellDataAvailabilityMode",
          "side",
          "signature",
          "userId"
        ],
        "type": "object",
        "properties": {
          "orderbookId": {
            "title": "Orderbook ID",
            "type": "string",
            "description": "The ID of the orderbook.",
            "format": "uuid"
          },
          "userId": {
            "title": "User ID",
            "type": "string",
            "description": "The unique identifier of the user submitting the order.",
            "format": "uuid"
          },
          "side": {
            "$ref": "#/components/schemas/OrderSide"
          },
          "price": {
            "title": "Price",
            "type": "number",
            "description": "The order price.",
            "format": "double"
          },
          "amount": {
            "title": "Amount",
            "type": "string",
            "description": "The order amount.",
            "format": "string"
          },
          "sellDataAvailabilityMode": {
            "$ref": "#/components/schemas/DataAvailabilityModes"
          },
          "buyDataAvailabilityMode": {
            "$ref": "#/components/schemas/DataAvailabilityModes"
          },
          "expirationTimestamp": {
            "title": "Expiration Timestamp",
            "type": "integer",
            "description": "The timestamp at which this order becomes invalid, in seconds since the Unix epoch.",
            "format": "int64"
          },
          "nonce": {
            "title": "Nonce",
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "description": "The unique nonce for the order.",
            "format": "int32"
          },
          "signature": {
            "$ref": "#/components/schemas/SignatureModel"
          }
        },
        "additionalProperties": false,
        "description": "Request model to submit an orderbook order."
      },
      "SubmitSettlementModel": {
        "required": [
          "orderA",
          "orderB"
        ],
        "type": "object",
        "properties": {
          "orderA": {
            "$ref": "#/components/schemas/SettlementOrderModel"
          },
          "orderB": {
            "$ref": "#/components/schemas/SettlementOrderModel"
          },
          "settlementInfo": {
            "$ref": "#/components/schemas/SettlementInfoModel"
          }
        },
        "additionalProperties": false,
        "description": "Request model to transfer assets between users."
      },
      "TenantAssetDto": {
        "type": "object",
        "properties": {
          "assetId": {
            "title": "Asset ID",
            "type": "string",
            "description": "The unique identifier of the asset.",
            "format": "uuid"
          },
          "assetType": {
            "title": "Asset Type",
            "type": "string",
            "description": "The asset type used for on-chain interactions.",
            "format": "hex",
            "nullable": true
          },
          "address": {
            "title": "Address",
            "type": "string",
            "description": "The Ethereum address of the asset.",
            "format": "hex",
            "nullable": true
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "The name of the asset.",
            "nullable": true
          },
          "symbol": {
            "title": "Symbol",
            "type": "string",
            "description": "The symbol of the asset.",
            "nullable": true
          },
          "quantum": {
            "title": "Quantum",
            "type": "string",
            "description": "The quantum of the asset."
          },
          "type": {
            "$ref": "#/components/schemas/AssetType"
          },
          "enabled": {
            "title": "Enabled",
            "type": "boolean",
            "description": "Is the asset enabled for the given tenant"
          },
          "confirmed": {
            "title": "Confirmed",
            "type": "boolean",
            "description": "Has the asset register transaction been confirmed in the Blockchain"
          }
        },
        "additionalProperties": false
      },
      "TenantAssetDtoPaginatedResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "title": "Data",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TenantAssetDto"
            },
            "description": "The data in the paginated response.",
            "nullable": true
          },
          "pagination": {
            "$ref": "#/components/schemas/PaginationDto"
          },
          "totalCount": {
            "title": "TotalCount",
            "type": "integer",
            "description": "The total count of results available.",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "TransactionDto": {
        "type": "object",
        "properties": {
          "transactionId": {
            "title": "Transaction ID",
            "type": "string",
            "description": "The ID of the transaction.",
            "format": "uuid"
          },
          "starkExTransactionId": {
            "title": "StarkEx Sequence ID",
            "type": "integer",
            "description": "The sequence ID of the transaction in StarkEx.",
            "format": "int64",
            "nullable": true
          },
          "starkExInstanceId": {
            "title": "StarkEx Instance ID",
            "type": "string",
            "description": "The ID of the StarkEx instance.",
            "format": "uuid"
          },
          "tenantId": {
            "title": "Tenant ID",
            "type": "string",
            "description": "The ID of the tenant.",
            "format": "uuid"
          },
          "operation": {
            "$ref": "#/components/schemas/StarkExOperation"
          },
          "status": {
            "$ref": "#/components/schemas/TransactionStatus"
          },
          "creationDate": {
            "title": "Creation Date",
            "type": "string",
            "description": "The date the transaction was created.",
            "format": "date-time"
          },
          "rawTransaction": {
            "$ref": "#/components/schemas/TransactionModel"
          }
        },
        "additionalProperties": false
      },
      "TransactionDtoPaginatedResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "title": "Data",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionDto"
            },
            "description": "The data in the paginated response.",
            "nullable": true
          },
          "pagination": {
            "$ref": "#/components/schemas/PaginationDto"
          },
          "totalCount": {
            "title": "TotalCount",
            "type": "integer",
            "description": "The total count of results available.",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "TransactionModel": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "TransactionStatus": {
        "enum": [
          "Created",
          "Streamed",
          "Pending",
          "Confirmed",
          "Reverted",
          "Failed"
        ],
        "type": "string"
      },
      "TransferDetailsDto": {
        "type": "object",
        "properties": {
          "senderStarkKey": {
            "title": "Sender STARK Key",
            "type": "string",
            "description": "The STARK key of the sender.",
            "format": "hex",
            "nullable": true
          },
          "senderVaultChainId": {
            "title": "Sender Vault Chain ID",
            "type": "string",
            "description": "The vault chain ID of the sender."
          },
          "senderVaultId": {
            "title": "Sender Vault ID",
            "type": "string",
            "description": "The vault ID of the sender.",
            "format": "uuid"
          },
          "receiverStarkKey": {
            "title": "Receiver STARK Key",
            "type": "string",
            "description": "The STARK key of the receiver.",
            "format": "hex",
            "nullable": true
          },
          "receiverVaultChainId": {
            "title": "Receiver Vault Chain ID",
            "type": "string",
            "description": "The vault chain ID of the receiver."
          },
          "receiverVaultId": {
            "title": "Receiver Vault ID",
            "type": "string",
            "description": "The vault ID of the receiver.",
            "format": "uuid"
          },
          "assetId": {
            "title": "StarkEx Asset ID",
            "type": "string",
            "description": "The StarkEx ID of the asset being transferred.",
            "format": "hex",
            "nullable": true
          },
          "quantizedAmount": {
            "title": "Quantized Amount",
            "type": "string",
            "description": "The amount of the asset to be transferred, in quantized form."
          },
          "feeVaultChainId": {
            "title": "Fee Vault Chain ID",
            "type": "string",
            "description": "The vault chain ID of the fee sender."
          },
          "feeVaultId": {
            "title": "Fee Vault ID",
            "type": "string",
            "description": "The vault ID of the fee sender.",
            "format": "uuid"
          },
          "feeQuantizedAmount": {
            "title": "Quantized Fee Amount",
            "type": "string",
            "description": "The amount of the fee asset to be collected, in quantized form."
          },
          "feeAssetId": {
            "title": "StarkEx Fee Asset ID",
            "type": "string",
            "description": "The StarkEx ID of the fee asset to be collected.",
            "format": "string",
            "nullable": true
          },
          "expirationTimestamp": {
            "title": "Expiration Timestamp",
            "type": "integer",
            "description": "The timestamp at which this transfer becomes invalid, in seconds since the Unix epoch.",
            "format": "int64"
          },
          "nonce": {
            "title": "Nonce",
            "type": "integer",
            "description": "The unique nonce for the transfer.",
            "format": "int32"
          },
          "signablePayload": {
            "title": "Signable Payload",
            "type": "string",
            "description": "The signable payload for the transfer.",
            "format": "hex",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TransferDetailsModel": {
        "required": [
          "amount",
          "assetId",
          "receiverDataAvailabilityMode",
          "receiverUserId",
          "senderDataAvailabilityMode",
          "senderUserId"
        ],
        "type": "object",
        "properties": {
          "senderUserId": {
            "title": "Sender User ID",
            "type": "string",
            "description": "The unique identifier of the user sending the transfer.",
            "format": "uuid"
          },
          "receiverUserId": {
            "title": "Receiver User ID",
            "type": "string",
            "description": "The unique identifier of the user receiving the transfer.",
            "format": "uuid"
          },
          "assetId": {
            "title": "Asset ID",
            "type": "string",
            "description": "The unique identifier of the asset being transferred.",
            "format": "uuid"
          },
          "tokenId": {
            "title": "Token ID",
            "type": "string",
            "description": "The hexadecimal string representation of the token ID, if applicable (ie. ERC-721/ERC-1155).",
            "format": "hex",
            "nullable": true
          },
          "mintingBlob": {
            "title": "Minting Blob",
            "type": "string",
            "description": "The hexadecimal string representation of the minting blob, if applicable (ie. Mintable ERC-20/ERC-721/ERC-1155).",
            "format": "hex",
            "nullable": true
          },
          "senderDataAvailabilityMode": {
            "$ref": "#/components/schemas/DataAvailabilityModes"
          },
          "receiverDataAvailabilityMode": {
            "$ref": "#/components/schemas/DataAvailabilityModes"
          },
          "amount": {
            "title": "Amount",
            "type": "string",
            "description": "The amount of the asset to be transferred."
          }
        },
        "additionalProperties": false,
        "description": "Request model to fetch details for a signable transfer."
      },
      "TransferModel": {
        "required": [
          "expirationTimestamp",
          "nonce",
          "quantizedAmount",
          "receiverVaultId",
          "senderVaultId",
          "signature"
        ],
        "type": "object",
        "properties": {
          "senderVaultId": {
            "title": "Sender Vault ID",
            "type": "string",
            "description": "The unique identifier of the transfer sender vault.",
            "format": "uuid"
          },
          "receiverVaultId": {
            "title": "Receiver Vault ID",
            "type": "string",
            "description": "The unique identifier of the transfer recipient vault.",
            "format": "uuid"
          },
          "quantizedAmount": {
            "title": "Quantized Amount",
            "type": "string",
            "description": "The amount of the asset to be transferred, in quantized form."
          },
          "expirationTimestamp": {
            "title": "Expiration Timestamp",
            "type": "integer",
            "description": "The timestamp at which this transfer becomes invalid, in seconds since the Unix epoch.",
            "format": "int64"
          },
          "nonce": {
            "title": "Nonce",
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "description": "The unique nonce for the transfer.",
            "format": "int32"
          },
          "signature": {
            "$ref": "#/components/schemas/SignatureModel"
          }
        },
        "additionalProperties": false,
        "description": "Request model to transfer assets between users."
      },
      "UserDto": {
        "type": "object",
        "properties": {
          "userId": {
            "title": "User ID",
            "type": "string",
            "description": "The ID of the user.",
            "format": "uuid"
          },
          "username": {
            "title": "Username",
            "type": "string",
            "description": "The username of the user.",
            "format": "string",
            "nullable": true
          },
          "starkKey": {
            "title": "STARK Key",
            "type": "string",
            "description": "The STARK key of the user.",
            "format": "hex",
            "nullable": true
          },
          "address": {
            "title": "Address",
            "type": "string",
            "description": "The Ethereum address associated with the user.",
            "format": "hex",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserDtoPaginatedResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "title": "Data",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserDto"
            },
            "description": "The data in the paginated response.",
            "nullable": true
          },
          "pagination": {
            "$ref": "#/components/schemas/PaginationDto"
          },
          "totalCount": {
            "title": "TotalCount",
            "type": "integer",
            "description": "The total count of results available.",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "UserWithVaultsDto": {
        "type": "object",
        "properties": {
          "user": {
            "$ref": "#/components/schemas/UserDto"
          },
          "vaultsPerAsset": {
            "title": "Vaults",
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/VaultDto"
              }
            },
            "description": "The user vaults grouped by the asset id.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "VaultDto": {
        "type": "object",
        "properties": {
          "vaultId": {
            "title": "Vault ID",
            "type": "string",
            "description": "The ID of the vault.",
            "format": "uuid"
          },
          "vaultChainId": {
            "title": "Vault Chain ID",
            "type": "string",
            "description": "The StarkEx ID of the vault."
          },
          "starkExAddress": {
            "title": "StarkEx Address",
            "type": "string",
            "description": "The address of the StarkEx instance associated with the vault.",
            "format": "hex",
            "nullable": true
          },
          "assetSymbol": {
            "title": "Asset Symbol",
            "type": "string",
            "description": "The symbol of the asset associated with the vault.",
            "format": "string",
            "nullable": true
          },
          "tokenId": {
            "title": "Token ID",
            "type": "string",
            "description": "The token id of the asset associated with the vault, if the asset is an ERC721 or ERC1155.",
            "format": "hex",
            "nullable": true
          },
          "mintingBlob": {
            "title": "Minting Blob",
            "type": "string",
            "description": "The minting blob of the asset associated with the vault, if the asset is a Mintable ERC20, ERC721 or ERC1155.",
            "format": "hex",
            "nullable": true
          },
          "assetStarkExId": {
            "title": "Asset StarkEx ID",
            "type": "string",
            "description": "The StarkEx ID of the asset associated with the vault.",
            "format": "hex",
            "nullable": true
          },
          "userStarkKey": {
            "title": "STARK Key",
            "type": "string",
            "description": "The STARK key of the user associated with the vault.",
            "format": "hex",
            "nullable": true
          },
          "availableBalance": {
            "title": "Available Balance",
            "type": "string",
            "description": "The available balance of the vault."
          },
          "accountingBalance": {
            "title": "Accounting Balance",
            "type": "string",
            "description": "The accounting balance of the vault."
          },
          "dataAvailabilityMode": {
            "$ref": "#/components/schemas/DataAvailabilityModes"
          }
        },
        "additionalProperties": false
      },
      "VaultDtoPaginatedResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "title": "Data",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VaultDto"
            },
            "description": "The data in the paginated response.",
            "nullable": true
          },
          "pagination": {
            "$ref": "#/components/schemas/PaginationDto"
          },
          "totalCount": {
            "title": "TotalCount",
            "type": "integer",
            "description": "The total count of results available.",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "WithdrawDetailsDto": {
        "type": "object",
        "properties": {
          "vault": {
            "$ref": "#/components/schemas/VaultDto"
          },
          "operatorContractAddress": {
            "title": "Operator Smart Contract Address",
            "type": "string",
            "description": "The smart contract address that processes on-chain withdraws.",
            "format": "hex",
            "nullable": true
          },
          "withdrawFunction": {
            "title": "Smart Contract Address",
            "type": "string",
            "description": "The withdraw function to use on-chain.",
            "format": "string",
            "nullable": true
          },
          "starkKey": {
            "title": "User's STARK Key",
            "type": "string",
            "description": "The user's public STARK key",
            "format": "hex",
            "nullable": true
          },
          "assetType": {
            "title": "Asset type",
            "type": "string",
            "description": "The asset type identifier.",
            "format": "hex",
            "nullable": true
          },
          "tokenId": {
            "title": "Token Id",
            "type": "string",
            "description": "The token Id for ERC-721 and ERC-1155 assets.",
            "format": "hex",
            "nullable": true
          },
          "mintingBlob": {
            "title": "Minting blob",
            "type": "string",
            "description": "The minting blob for Mintable ERC-20, ERC-721 and ERC-1155 assets.",
            "format": "hex",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "WithdrawModel": {
        "required": [
          "amount",
          "vaultId"
        ],
        "type": "object",
        "properties": {
          "vaultId": {
            "title": "Vault ID",
            "type": "string",
            "description": "The unique identifier of the vault to withdraw from.",
            "format": "uuid"
          },
          "amount": {
            "title": "Amount",
            "type": "string",
            "description": "The amount of the asset to be withdrawn, in unquantized form."
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "apikey": {
        "type": "apiKey",
        "description": "API Key Authentication",
        "name": "x-api-key",
        "in": "header"
      }
    }
  },
  "tags": [
    {
      "name": "User",
      "description": "Operations related with the user management."
    },
    {
      "name": "Asset",
      "description": "Operations related with the management of assets in the tenant system."
    },
    {
      "name": "Mint",
      "description": "Operations related with the minting of ERC-20, ERC-721 and ERC-1155 assets."
    },
    {
      "name": "Transfer",
      "description": "Operations related with the transfer of assets."
    },
    {
      "name": "Transaction",
      "description": "Operations related with the transactions submitted by the system."
    },
    {
      "name": "Withdraw",
      "description": "Operations related with the withdrawal of assets."
    },
    {
      "name": "Vault",
      "description": "Operations related with the vault management."
    },
    {
      "name": "Fee",
      "description": "Operations related with the configuration of the fee model in the tenant system."
    },
    {
      "name": "Orderbook",
      "description": "Operations related with the orderbook management."
    },
    {
      "name": "Order",
      "description": "Operations related with the order management."
    },
    {
      "name": "Settlement",
      "description": "Operations related with the settlement of assets."
    }
  ]
}